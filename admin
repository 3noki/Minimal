#!/bin/bash

pushd $(dirname ${BASH_SOURCE[0]}) > /dev/null

configuration=$(basename ${BASH_SOURCE[0]}).cfg
source "${configuration}"

server_install() {
    server_uninstall

    echo "$(tput bold)apt-get update$(tput sgr0)"
    if [ ${runtime} = "dotnet" ]; then
        if [ -z "$(which dotonet)" ]; then
            sudo sh -c 'echo "deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main" > /etc/apt/sources.list.d/dotnetdev.list'
            sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 417A0893
        fi
    elif [ ${runtime} = "node" ]; then
        if [ -z "$(which node)" ]; then
            curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
        fi
    fi
    sudo apt-get -qq update

    if [ ${runtime} = "go" ]; then 
        echo "$(tput bold)apt-get install golang$(tput sgr0)"
        sudo apt-get -qq install --yes golang
    elif [ ${runtime} = "python" ]; then
        echo "$(tput bold)apt-get install python$(tput sgr0)"
        sudo apt-get -qq install --yes python python-dateutil
    elif [ ${runtime} = "dotnet" ]; then
        echo "$(tput bold)apt-get install dotnet-dev-1.0.1$(tput sgr0)"
        sudo apt-get -qq install --yes dotnet-dev-1.0.1
    else
        echo "$(tput bold)apt-get install nodejs$(tput sgr0)"
        sudo apt-get -qq install --yes nodejs
    fi

    echo "$(tput bold)apt-get install nginx$(tput sgr0)"
    sudo apt-get -qq install --yes nginx

    echo "$(tput bold)install nginx.service$(tput sgr0)"
    sudo systemctl stop nginx.service
cat << EOF >> "${site}.conf"
server {
    listen 80;
EOF
    if [ -n "${domain}" ]; then
        if sudo test -f "/etc/letsencrypt/live/${domain}/fullchain.pem" && sudo test -f "/etc/letsencrypt/live/${domain}/privkey.pem"; then
ssl=$(cat << EOF
    listen 443 ssl;
    ssl_certificate /etc/letsencrypt/live/${domain}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${domain}/privkey.pem;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
EOF
)
cat << EOF >> "${site}.conf"
${ssl}
    server_name ${domain};
    return 301 https://www.${domain}\$request_uri;
}
server {
    listen 80;
    server_name www.${domain};
    return 301 https://www.${domain}\$request_uri;
}
server {
${ssl}
    server_name www.${domain};
EOF
        else
cat << EOF >> "${site}.conf"
server {
    listen 80
    server_name www.${domain};
EOF
        fi
    fi
cat << EOF >> "${site}.conf"
    gzip on;
    gzip_proxied any;
    gzip_min_length 1000;
    gzip_http_version 1.0;
    gzip_disable 'msie6';
    gzip_types text/plain text/css text/javascript application/json application/atom+xml application/rss+xml;
    gzip_vary on;
    location / {
        proxy_pass http://localhost:8080;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-NginX-Proxy true;
        proxy_cache_bypass \$http_upgrade;
        proxy_ssl_session_reuse off;
    }
}
EOF
    sudo cp "${site}.conf" "/etc/nginx/sites-available/${site}.conf"
    rm "${site}.conf"
    sudo rm -f "/etc/nginx/sites-enabled/default"
    sudo ln -f -s "/etc/nginx/sites-available/${site}.conf" "/etc/nginx/sites-enabled/${site}.conf"
    sudo systemctl start "nginx.service"
    if [ $(systemctl is-active "nginx.service") != "active" ]; then
        sudo systemctl status "nginx.service" --no-pager --lines=25 --full
        echo "ERROR: ngnix.service is not active."
        return
    fi

    if sudo test -f "/etc/letsencrypt/live/${domain}/fullchain.pem" && sudo test -f "/etc/letsencrypt/live/${domain}/privkey.pem"; then
        echo "$(tput bold)install ${site}-cert.service$(tput sgr0)"
cat > "${site}-cert.service" << EOF
[Unit]
Description=${site}-cert.service
[Service]
Type=oneshot
WorkingDirectory=$(pwd)
ExecStart=/bin/bash $(pwd)/admin cert
User=$(whoami)
Group=$(whoami)
SyslogIdentifier=${site}-cert.service
EOF
        sudo cp "${site}-cert.service" "/etc/systemd/system/${site}-cert.service"
        rm "${site}-cert.service"

        echo "$(tput bold)install ${site}-cert.timer$(tput sgr0)"
cat > "${site}-cert.timer" << EOF
[Unit]
Description=${site}-cert.timer
[Timer]
OnCalendar=Mon *-*-* 00:00:00
Persistent=true
Unit=${site}-cert.service
[Install]
WantedBy=timers.target
EOF
        sudo cp "${site}-cert.timer" "/etc/systemd/system/${site}-cert.timer"
        rm "${site}-cert.timer"
        sudo systemctl enable "${site}-cert.timer"
        sudo systemctl start "${site}-cert.timer"
        if [ $(systemctl is-active "${site}-cert.timer") != "active" ]; then
            sudo systemctl status "${site}-cert.timer" --no-pager --lines=25 --full
            echo "ERROR: ${site}-cert.timer is not active."
            return
        fi
    fi

    echo "$(tput bold)install ${site}.service$(tput sgr0)"
    if [ ${runtime} = "go" ]; then 
        command="$(pwd)/.vscode/out/go/app"
        environment="GO_ENV=production"
    elif [ ${runtime} = "python" ]; then
        command="$(which python) $(pwd)/app.py"
        environment="PYTHON_ENV=production"
    elif [ ${runtime} = "dotnet" ]; then
        command="$(which dotnet) exec .vscode/out/dotnet/bin/netcoreapp1.1/app.dll"
        environment="ASPNETCORE_ENVIRONMENT=Production"
    else
        command="$(which node) $(pwd)/app.js"
        environment="NODE_ENV=production"
    fi
cat > "${site}.service" << EOF
[Unit]
Description=${site}.service
[Service]
WorkingDirectory=$(pwd)
ExecStart=${command}
Environment=${environment}
Restart=always
RestartSec=10
User=$(whoami)
Group=$(whoami)
SyslogIdentifier=${site}.service
[Install]
WantedBy=multi-user.target
EOF
    sudo cp "${site}.service" "/etc/systemd/system/${site}.service"
    rm "${site}.service"
    sudo systemctl enable "${site}.service"
    if [ $(systemctl is-enabled "${site}.service") != "enabled" ]; then
        sudo systemctl status "${site}.service" --no-pager --lines=25 --full
        echo "ERROR: ${site}.service is not enabled."
        return
    fi

}

server_uninstall() {
    server_stop
    if [ -f "/etc/systemd/system/${site}-cert.timer" ]; then
        echo "$(tput bold)uninstall ${site}-cert.timer$(tput sgr0)"
        if [ $(systemctl is-active "${site}-cert.timer") = "active" ]; then
            sudo systemctl stop "${site}-cert.timer"
            if [ $(systemctl is-active "${site}-cert.timer") != "inactive" ]; then
                sudo systemctl status "${site}-cert.timer" --no-pager --lines=25 --full
                echo "ERROR: ${site}-cert.timer is not inactive."
                return
            fi
        fi
        if [ $(systemctl is-enabled ${site}-cert.timer) = "enabled" ]; then
            sudo systemctl disable "${site}-cert.timer"
            if [ $(systemctl is-enabled "${site}-cert.timer") != "disabled" ]; then
                sudo systemctl status "${site}-cert.timer" --no-pager --lines=25 --full
                echo "ERROR: ${site}-cert.timer is not disabled."
                return
            fi
        fi
        sudo rm "/etc/systemd/system/${site}-cert.timer"
    fi
    if [ -f "/etc/systemd/system/${site}-cert.service" ]; then
        echo "$(tput bold)uninstall ${site}-cert.service$(tput sgr0)"
        sudo rm "/etc/systemd/system/${site}-cert.service"
    fi
    if [ -f "/etc/systemd/system/${site}.service" ]; then
        echo "$(tput bold)uninstall ${site}.service$(tput sgr0)"
        if [ $(systemctl is-enabled ${site}.service) = "enabled" ]; then
            sudo systemctl disable "${site}.service"
            if [ $(systemctl is-enabled "${site}.service") != "disabled" ]; then
                sudo systemctl status "${site}.service" --no-pager --lines=25 --full
                echo "ERROR: ${site}.service is not disabled."
                return
            fi
        fi
        sudo rm "/etc/systemd/system/${site}.service"
    fi
    if [ -f "/etc/nginx/sites-available/${site}.conf" ]; then
        echo "$(tput bold)uninstall nginx.service$(tput sgr0)"
        sudo systemctl stop "nginx.service"
        sudo rm "/etc/nginx/sites-enabled/${site}.conf"
        sudo rm "/etc/nginx/sites-available/${site}.conf"
        sudo ln -f -s "/etc/nginx/sites-available/default" "/etc/nginx/sites-enabled/default"
        sudo systemctl start "nginx.service"
        if [ $(systemctl is-active "nginx.service") != "active" ]; then
            sudo systemctl status ngnix.service --no-pager --lines=25 --full
            echo "ERROR: ngnix.service is not active."
            return
        fi
    fi
}

server_start() {
    echo "$(tput bold)start ${site}.service$(tput sgr0)"
    if [ ${runtime} = "go" ]; then
        go build -o .vscode/out/go/app app.go
        if [ $? -ne 0 ]; then
            return
        fi
    elif [ ${runtime} = "dotnet" ]; then
        dotnet restore && dotnet build
        if [ $? -ne 0 ]; then
            echo "ERROR: dotnet restore && dotnet build failed."
            return
        fi
    fi
    sudo systemctl start ${site}.service
    sleep 2
    sudo systemctl status ${site}.service  --no-pager --lines=1000 --full
}

server_stop() {
    if [ $(systemctl is-active "${site}.service") = "active" ]; then
        echo "$(tput bold)stop ${site}.service$(tput sgr0)"
        sudo systemctl stop "${site}.service"
        if [ $(systemctl is-active "${site}.service") = "active" ]; then
            sudo systemctl stop "${site}.service"
            if [ $(systemctl is-active "${site}.service") != "inactive" ]; then
                sudo systemctl status "${site}.service" --no-pager --lines=25 --full
                echo "ERROR: ${site}.service is not inactive."
                return
            fi
        fi
    fi
}

server_cert() {
    if [ -z ${domain} ] || [ -z ${email} ]; then
        echo "ERROR: Update 'domain' and 'email' in $(tput smul)${configuration}$(tput sgr0)."
        return
    fi

    echo "$(tput bold)apt-get install letsencrypt$(tput sgr0)"
    sudo apt-get -qq update
    sudo apt-get -qq install --yes letsencrypt

    server_stop
    mkdir ./.well-known
    server_start

    if sudo test -f "/etc/letsencrypt/live/${domain}/fullchain.pem" && sudo test -f "/etc/letsencrypt/live/${domain}/privkey.pem"; then
        echo "$(tput bold)renew certificate$(tput sgr0)"
        sudo letsencrypt renew
    else
        echo "$(tput bold)create certificate$(tput sgr0)"
        mkdir -p .well-known/acme-challenge
        sudo letsencrypt certonly --webroot -w $(pwd) -d ${domain} -d www.${domain} --agree-tos --email ${email}
        rm letsencrypt.log
    fi

    server_stop
    rm -R ./.well-known
    server_start

    echo "$(tput bold)reload nginx.service$(tput sgr0)"
    sudo systemctl stop "nginx.service"
    sudo systemctl start "nginx.service"
    if [ $(systemctl is-active "nginx.service") != "active" ]; then
        sudo systemctl status "nginx.service" --no-pager --lines=25 --full
        echo "ERROR: nginx.service is not active."
    fi
}

server_status() {
    sudo systemctl status ${site}.service --no-pager --lines=1000 --full
}

server_pull() {
    echo "$(tput bold)git fetch -p$(tput sgr0)"
    git fetch -p
    branch=origin/$(git rev-parse --abbrev-ref HEAD)
    echo "$(tput bold)git reset --hard ${branch}$(tput sgr0)"
    git reset --hard ${branch}
}

server_update() {
    server_stop
    server_uninstall
    server_pull
    source "${configuration}"
    server_install
    server_start
}

server_test() {
    server_stop
    client_test
}

client_start() {
    if [ ${1:-${runtime}} = "go" ]; then 
        sleep 1 && git web--browse http://localhost:8080 & GO_ENV=${GO_ENV:-development} go run app.go
    elif [ ${1:-${runtime}} = "python" ]; then
        sleep 0.5 && git web--browse http://localhost:8080 & PYTHON_ENV=${PYTHON_ENV:-development} python app.py
    elif [ ${1:-${runtime}} = "dotnet" ]; then
        dotnet restore > /dev/null && dotnet build > /dev/null
        if [ $? -ne 0 ]; then
            echo "dotnet restore && dotnet build failed."
            return
        fi
        sleep 1 && git web--browse http://localhost:8080 & ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development} dotnet exec .vscode/out/dotnet/bin/netcoreapp1.1/app.dll
    else
        sleep 0.5 && git web--browse http://localhost:8080 & NODE_ENV=${NODE_ENV:-development} node app.js
    fi
}

client_status() {
    echo "$(tput bold)ssh ${user}@${server} status$(tput sgr0)"
    ssh -i ~/.ssh/${user}_id_rsa ${user}@${server} -tq -o "BatchMode yes" "/var/www/${site}/admin status"
}

client_update() {
    client_push
    echo "$(tput bold)ssh ${user}@${server} update$(tput sgr0)"
    ssh -i ~/.ssh/${user}_id_rsa ${user}@${server} -tq -o "BatchMode yes" "/var/www/${site}/admin update" # | sed 's/^/    /'
}

client_push() {
    message=$@
    echo "$(tput bold)git add -v *$(tput sgr0)"
    git add -v *
    if [ -z "${message}" ]; then # if no description is provided amend last commit and push --force
        echo "$(tput bold)git commit --amend --no-edit$(tput sgr0)"
        git commit --amend --no-edit
        echo "$(tput bold)git push --force$(tput sgr0)"
        git push --force
    else # if description is provided create new commit and push
        echo "$(tput bold)git commit -m '${message}'$(tput sgr0)"
        git commit -m "${message}"
        echo "$(tput bold)git push$(tput sgr0)"
        git push
    fi
}

client_test() {
    output="./.vscode/out/test"
    mkdir -p ${output}
    echo "$(tput bold)node$(tput sgr0)"
    NODE_ENV=production node ./app.js & pid=$!
    sleep 0.5
    curl -s http://localhost:8080/ > ${output}/root_node.html
    curl -s http://localhost:8080/blog/atom.xml > ${output}/atom_node.xml
    kill -9 ${pid}
    wait ${pid} 2>/dev/null
    echo "$(tput bold)go$(tput sgr0)"
    go build -o .vscode/out/go/app app.go
    GO_ENV=production .vscode/out/go/app & pid=$!
    sleep 0.5
    curl -s http://localhost:8080/ > ${output}/root_go.html
    curl -s http://localhost:8080/blog/atom.xml > ${output}/atom_go.xml
    kill -9 ${pid}
    wait ${pid} 2>/dev/null
    echo "$(tput bold)python$(tput sgr0)"
    PYTHON_ENV=production python ./app.py & pid=$!
    sleep 0.5
    curl -s http://localhost:8080/ > ${output}/root_python.html
    curl -s http://localhost:8080/blog/atom.xml > ${output}/atom_python.xml
    kill -9 ${pid}
    wait ${pid} 2>/dev/null
    echo "$(tput bold)dotnet$(tput sgr0)"
    dotnet restore > /dev/null && dotnet build > /dev/null
    if [ $? -ne 0 ]; then
        echo "dotnet restore && dotnet build failed."
        return
    fi
    ASPNETCORE_ENVIRONMENT=Production dotnet exec .vscode/out/dotnet/bin/netcoreapp1.1/app.dll & pid=$!
    sleep 0.5
    curl -s http://localhost:8080/ > ${output}/root_dotnet.html
    curl -s http://localhost:8080/blog/atom.xml > ${output}/atom_dotnet.xml
    kill -9 ${pid}
    wait ${pid} 2>/dev/null
    echo "$(tput bold)compare$(tput sgr0)"
    cmp ${output}/root_node.html ${output}/root_go.html
    cmp ${output}/root_node.html ${output}/root_python.html
    cmp ${output}/root_node.html ${output}/root_dotnet.html
    cmp ${output}/atom_node.xml ${output}/atom_go.xml
    cmp ${output}/atom_node.xml ${output}/atom_python.xml
    cmp ${output}/atom_node.xml ${output}/atom_dotnet.xml
}

client_console() {
    ssh -i ~/.ssh/${user}_id_rsa ${user}@${server} -t "cd /var/www/${site} && exec bash -l"
}

description() {
    echo;
    echo "  This script automates common tasks to run this website."
    echo "  It can be configured via $(tput smul)${configuration}$(tput sgr0) and provides two sets of commmands,"
    echo "  one for local development and another for running the website on an"
    echo "  actual Linux server. Your computer is considered a server if the "
    echo "  script is located at /var/www/\${site}/."
    echo
}

server() {
    command="$1"
    shift
    case "${command}" in
        "install") server_install;;
        "uninstall") server_uninstall;;
        "cert") server_cert;;
        "pull") server_pull;;
        "start") server_start;;
        "stop") server_stop;;
        "update") server_update;;
        "status") server_status;;
        "test") server_test;;
        *)
            description;
            echo "Usage: $(tput bold)$(basename "$0")$(tput sgr0) <server-command>"
            echo
            echo "    $(tput bold)install$(tput sgr0)    Install NGINX and $(tput bold)${site}.service$(tput sgr0)"
            echo "    $(tput bold)start$(tput sgr0)      Start service"
            echo "    $(tput bold)status$(tput sgr0)     Print current service status"
            echo "    $(tput bold)update$(tput sgr0)     Run stop, pull, start and status"
            echo "    $(tput bold)cert$(tput sgr0)       Create or renew SSL certificate"
            echo "    $(tput bold)pull$(tput sgr0)       Fetch Git repo and reset master branch"
            echo "    $(tput bold)stop$(tput sgr0)       Stop service"
            echo "    $(tput bold)uninstall$(tput sgr0)  Stop and uninstall service"
            echo;
        ;;
    esac
}

client() {
    command="$1"
    shift
    case "${command}" in
        "start") client_start $@;;
        "push") client_push $@;;
        "update") client_update $@;;
        "status") client_status;;
        "console") client_console;;
        "test") client_test;;
        *)
            description;
            echo "Usage: $(tput bold)$(basename "$0")$(tput sgr0) <client-command>"
            echo
            echo "  $(tput bold)start$(tput sgr0)      Start web server locally and open web browser"
            echo "  $(tput bold)push$(tput sgr0)       Amend last commit or add new commit, then push changes"
            echo "  $(tput bold)update$(tput sgr0)     Run push command and update server"
            echo "  $(tput bold)status$(tput sgr0)     Show server log"
            echo "  $(tput bold)console$(tput sgr0)    Connect via SSH to server"
            echo;
        ;;
    esac
}

if [ -d "/var/www/${site}" ]; then 
    server $@
else
    client $@
fi

popd > /dev/null
